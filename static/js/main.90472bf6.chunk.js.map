{"version":3,"sources":["day-05/Icons.js","day-05/IconsBox.js","day-05/Profile.js","day-05/SkillsList.js","day-05/ProfileCard.js","day-05/ProfileBox.js","day-03/Form.js","day-04/hexadecimal-colors.js","day-04/HexaColorBox.js","day-05/user.js","day-05/date-string.js","day-06/Cell.js","day-06/Grid.js","day-06/NumberGrid.js","day-06/random-generators.js","day-06/HexaColorGrid.js","day-06/most-populated-countries.js","day-06/Bar.js","day-06/CountryChart.js","day-06/country-label.js","App.js","day-06/number-colors.js","serviceWorker.js","index.js"],"names":["Icons","iconsList","className","map","icon","IconsBox","title","icons","Profile","name","role","location","faUserTie","faCheckCircle","SkillsList","skills","dateJoined","skill","key","toString","faClock","ProfileCard","user","skillsTitle","ProfileBox","signupForm","aria-label","type","placeholder","id","signupContent","signupBox","hexaColor","str","color","i","Math","floor","random","length","HexaColorBox","arr","push","item","index","style","backgroundColor","dateObject","month","getMonth","year","getFullYear","day","getDate","dateString","Date","Cell","value","Grid","items","colSize","gridCols","Array","from","join","gridTemplateColumns","NumberGrid","numbers","size","colors","HexaColorGrid","tenMostPopulated","country","population","Bar","label","maxValue","width","round","toLocaleString","CountryChart","data","maxPopulation","max","match","App","faHtml5","faCss3Alt","faJs","faReact","keys","number","isPrime","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90472bf6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"../css/Icons.css\";\r\n\r\nconst Icons = ({ iconsList }) => (\r\n  <div className=\"icons\">\r\n    {iconsList.map((icon) => (\r\n      <div>\r\n        <FontAwesomeIcon icon={icon} />\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Icons;\r\n","import React from \"react\";\r\n// import {\r\n//   faHtml5,\r\n//   faCss3Alt,\r\n//   faJs,\r\n//   faReact\r\n// } from \"@fortawesome/free-brands-svg-icons\";\r\nimport Icons from \"./Icons\";\r\n\r\n//const techTitle = \"Front End Technologies\";\r\n\r\nconst IconsBox = ({ title, icons }) => (\r\n  <div className=\"box icons-box\">\r\n    <h1>{title}</h1>\r\n    <Icons iconsList={icons} />\r\n  </div>\r\n);\r\n\r\nexport default IconsBox;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle, faUserTie } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Profile = ({ name, role, location }) => (\r\n  <div className=\"profile\">\r\n    <FontAwesomeIcon icon={faUserTie} />\r\n    <h2>\r\n      {name} <FontAwesomeIcon icon={faCheckCircle} />\r\n    </h2>\r\n    <p>\r\n      {role}, {location}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SkillsList = ({ title, skills, dateJoined }) => (\r\n  <div className=\"skills\">\r\n    <h2>{title}</h2>\r\n    <p>\r\n      {skills.map((skill) => (\r\n        <span className=\"skill-item\" key={skill.toString()}>\r\n          {skill}\r\n        </span>\r\n      ))}\r\n    </p>\r\n    <p>\r\n      <FontAwesomeIcon icon={faClock} /> Joined on {dateJoined}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default SkillsList;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport SkillsList from \"./SkillsList\";\r\n\r\nconst ProfileCard = ({ user, skillsTitle }) => (\r\n  <div className=\"profile-card\">\r\n    <Profile\r\n      name={user.name}\r\n      role={user.role}\r\n      location={user.location}\r\n    />\r\n    <SkillsList\r\n      title={skillsTitle}\r\n      skills={user.skills}\r\n      dateJoined={user.dateJoined}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default ProfileCard;\r\n","import React from \"react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport \"../css/Profile.css\";\r\n\r\nfunction ProfileBox({ user }) {\r\n  return (\r\n    <div className=\"box profile-box\">\r\n      <ProfileCard user={user} skillsTitle=\"Skills\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileBox;\r\n","import React from \"react\";\r\nimport \"../css/Form.css\";\r\n\r\nconst signupForm = (\r\n  <form className=\"signup-form\">\r\n    <div aria-label=\"Subscription Details\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"firstname\"\r\n        aria-label=\"First Name\"\r\n        placeholder=\"First name\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"lastname\"\r\n        aria-label=\"Last Name\"\r\n        placeholder=\"Last name\"\r\n      />\r\n      <input type=\"text\" name=\"email\" aria-label=\"Email\" placeholder=\"Email\" />\r\n    </div>\r\n    <button id=\"subscribe\" type=\"submit\">\r\n      Subscribe\r\n    </button>\r\n  </form>\r\n);\r\n\r\nconst signupContent = (\r\n  <div className=\"signup-content\">\r\n    <h2>Subscribe</h2>\r\n    <p>Sign up with your email address to receive news and updates.</p>\r\n    {signupForm}\r\n  </div>\r\n);\r\n\r\nconst signupBox = <div className=\"box signup-box\">{signupContent}</div>;\r\n\r\nexport default signupBox;\r\n","export const hexaColor = () => {\r\n  const str = \"0123456789abcdef\";\r\n  let color = \"\";\r\n  for (let i = 0; i < 6; i++) {\r\n    let index = Math.floor(Math.random() * str.length);\r\n    color += str[index];\r\n  }\r\n  return \"#\" + color;\r\n};\r\n","import React from \"react\";\r\nimport \"../css/HexaColorBox.css\";\r\nimport { hexaColor } from \"./hexadecimal-colors\";\r\n\r\nconst HexaColorBox = () => {\r\n  const arr = [];\r\n  for (let i=0; i<5; i++) {\r\n    arr.push(hexaColor());\r\n  }\r\n\r\n  return (\r\n    <div className=\"box color-boxes\">\r\n      {arr.map((item, index) => (\r\n        <div\r\n          className=\"color-box\"\r\n          key={index+item.toString()}\r\n          style={{backgroundColor: item}}\r\n        >\r\n          {item}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HexaColorBox;\r\n","import { dateString } from \"./date-string\";\r\n\r\nexport const user = {\r\n  name: \"Piouson\",\r\n  role: \"Developer\",\r\n  location: \"Manchester UK\",\r\n  skills: [\r\n    \"HTML\",\r\n    \"CSS\",\r\n    \"Sass\",\r\n    \"Bootstrap\",\r\n    \"JavaScript\",\r\n    \"jQuery\",\r\n    \"TypeScript\",\r\n    \"React\",\r\n    \"Redux\",\r\n    \"Material-UI\",\r\n    \"Node\",\r\n    \"Express\",\r\n    \"MongoDB\",\r\n    \"Jest\",\r\n    \"PostgreSQL\",\r\n    \"Mocha\",\r\n    \"Docker\",\r\n    \"Git\",\r\n    \"Cypress\",\r\n  ],\r\n  dateJoined: dateString(new Date()),\r\n};\r\n","export const dateString = (dateObject) => {\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const month = months[dateObject.getMonth()]\r\n  const year = dateObject.getFullYear();\r\n  const day = dateObject.getDate();\r\n\r\n  return `${day < 10 ? '0'+day : day} ${month} ${year}`;\r\n}","import React from \"react\";\r\n\r\nconst Cell = ({ value, color }) => (\r\n  <div className=\"hexa-cell\" style={{ backgroundColor: color }}>\r\n    <p>{value}</p>\r\n  </div>\r\n);\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"../css/Grid.css\";\r\n\r\nconst Grid = ({ items, colSize }) => {\r\n  const gridCols = Array.from(Array(colSize))\r\n    .map(() => \"1fr\")\r\n    .join(\" \");\r\n  return (\r\n    <div\r\n      className=\"hexa-grid\"\r\n      style={{ gridTemplateColumns: gridCols }}\r\n    >\r\n      {items.map((item) => (\r\n        <Cell value={item.value} color={item.color} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport \"../css/NumberGrid.css\";\r\n\r\nconst NumberGrid = ({ numbers, size }) => (\r\n  <div className=\"box text-center number-grid\">\r\n    <h2>30 Days Of React</h2>\r\n    <p role=\"doc-subtitle\">Number Generator</p>\r\n    <Grid items={numbers} colSize={size} />\r\n  </div>\r\n)\r\n\r\nexport default NumberGrid;","import { hexaColor } from \"../day-04/hexadecimal-colors\";\r\nimport { getColor } from \"./number-colors\";\r\n\r\nexport const numbers = (size) => {\r\n  return Array.from(Array(size).keys())\r\n    .map((key) => ({ value: key, color: getColor(key) }));\r\n}\r\n\r\nexport const colors = (size) => {\r\n  return Array.from(Array(size)).map(() => {\r\n    const color = hexaColor();\r\n    return ({\r\n      value: color,\r\n      color: color,\r\n    })\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport \"../css/HexaColorGrid.css\";\r\n\r\nconst HexaColorGrid = ({ colors, size }) => (\r\n  <div className=\"box text-center hexa-color-grid\">\r\n    <h2>30 Days Of React</h2>\r\n    <p role=\"doc-subtitle\">Hexadecimal Colors</p>\r\n    <Grid items={colors} colSize={size} />\r\n  </div>\r\n);\r\n\r\nexport default HexaColorGrid;\r\n","export const tenMostPopulated = [\r\n  { country: \"World\", population: 7693165599 },\r\n  { country: \"China\", population: 1377422166 },\r\n  { country: \"India\", population: 1295210000 },\r\n  { country: \"United States of America\", population: 323947000 },\r\n  { country: \"Indonesia\", population: 258705000 },\r\n  { country: \"Brazil\", population: 206135893 },\r\n  { country: \"Pakistan\", population: 194125062 },\r\n  { country: \"Nigeria\", population: 186988000 },\r\n  { country: \"Bangladesh\", population: 161006790 },\r\n  { country: \"Russian Federation\", population: 146599183 },\r\n  { country: \"Japan\", population: 126960000 },\r\n];\r\n","import React from \"react\";\r\n\r\nconst Bar = ({ label, value, maxValue }) => {\r\n  const width = Math.round((value / maxValue) * 100) + \"%\";\r\n  return (\r\n    <div className=\"bar-row\">\r\n      <p className=\"bar-label\">{label}</p>\r\n      <div className=\"bar\">\r\n        <div className=\"bar-fill\" style={{ width: width }}>\r\n          {width}\r\n        </div>\r\n      </div>\r\n      <p className=\"bar-value\">{value.toLocaleString()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import React from \"react\";\r\nimport Bar from \"./Bar\";\r\nimport \"../css/CountryChart.css\";\r\nimport { countryLabel } from \"./country-label\";\r\n\r\nconst CountryChart = ({ data }) => {\r\n  const maxPopulation = Math.max(...data.map((item) => item.population));\r\n  \r\n  return (\r\n    <div className=\"box chart\">\r\n      <h2>30 Days Of React</h2>\r\n      <h3>World Population</h3>\r\n      <p>Ten most populated countries</p>\r\n      {data.map((item, index) => (\r\n        <Bar\r\n          key={index + item.country}\r\n          label={countryLabel(item.country)}\r\n          value={item.population}\r\n          maxValue={maxPopulation}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryChart;\r\n","export const countryLabel = (country) => {\r\n  if (country.match(/america/i)) {\r\n    return \"USA\";\r\n  } else if (country.match(/russia/i)) {\r\n    return \"Russia\";\r\n  } else {\r\n    return country;\r\n  }\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport IconsBox from './day-05/IconsBox';\nimport {\n  faHtml5,\n  faCss3Alt,\n  faJs,\n  faReact\n} from \"@fortawesome/free-brands-svg-icons\";\nimport ProfileBox from './day-05/ProfileBox';\nimport signupBox from \"./day-03/Form\";\nimport HexaColorBox from \"./day-04/HexaColorBox\";\nimport { user } from './day-05/user';\nimport NumberGrid from './day-06/NumberGrid';\nimport { colors, numbers } from './day-06/random-generators';\nimport HexaColorGrid from './day-06/HexaColorGrid';\nimport { tenMostPopulated } from \"./day-06/most-populated-countries\";\nimport CountryChart from './day-06/CountryChart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IconsBox\n        title=\"Front End Technologies\"\n        icons={[faHtml5, faCss3Alt, faJs, faReact]}\n      />\n      <ProfileBox user={user} />\n      {signupBox}\n      <HexaColorBox />\n      <NumberGrid numbers={numbers(32)} size={8} />\n      <HexaColorGrid colors={colors(32)} size={8} />\n      <CountryChart data={tenMostPopulated} />\n    </div>\n  );\n}\n\nexport default App;\n","const isPrime = (number) => {\r\n  for (let i = 2; i < number; i++) {\r\n    if (number % i === 0) {\r\n      return;\r\n    }\r\n  }\r\n  return number > 1;\r\n};\r\n\r\nexport const getColor = (number) => {\r\n  if (isPrime(number)) {\r\n    return \"#ff6666\";\r\n  } else if (number % 2 === 0) {\r\n    return \"#009900\";\r\n  } else {\r\n    return \"#ffcc00\";\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}