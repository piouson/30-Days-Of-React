{"version":3,"sources":["day-03/Profile.js","day-03/Icons.js","day-03/Form.js","day-04/HexaColorBox.js","App.js","serviceWorker.js","index.js"],"names":["profile","className","icon","faReact","faCheckCircle","skillsItems","map","item","key","toString","skills","faClock","profileCard","ProfileBox","htmlDiv","faHtml5","cssDiv","faCss3Alt","jsDiv","faJs","reactDiv","icons","iconsBox","signupForm","aria-label","type","name","placeholder","id","signupContent","signupBox","hexaColor","str","color","i","Math","floor","random","length","HexaColorBox","arr","push","index","style","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAoCMA,EACJ,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAiBC,KAAMC,MACvB,4BA7Be,UA6Bf,IACe,kBAAC,IAAD,CAAiBD,KAAME,OAEtC,2BA/Be,YA+Bf,KA9BmB,kBAoCjBC,EAlCe,CACnB,OACA,MACA,OACA,YACA,aACA,SACA,aACA,QACA,QACA,cACA,OACA,UACA,UACA,aACA,OACA,QACA,UACA,SACA,OAe+BC,KAAI,SAACC,GAAD,OACnC,0BAAMN,UAAU,aAAaO,IAAKD,EAAKE,YACpCF,MAICG,EACJ,yBAAKT,UAAU,UACb,4BA/CgB,UAgDhB,2BAAII,GACJ,2BACE,kBAAC,IAAD,CAAiBH,KAAMS,MADzB,cA7CqB,gBAmDnBC,EACJ,yBAAKX,UAAU,gBACZD,EACAU,GAUUG,MANf,WACE,OACE,yBAAKZ,UAAU,mBAAmBW,IC7DhCE,G,MACJ,6BACE,kBAAC,IAAD,CAAiBZ,KAAMa,QAIrBC,EACJ,6BACE,kBAAC,IAAD,CAAiBd,KAAMe,OAIrBC,EACJ,6BACE,kBAAC,IAAD,CAAiBhB,KAAMiB,OAIrBC,EACJ,6BACE,kBAAC,IAAD,CAAiBlB,KAAMC,OAIrBkB,EACJ,yBAAKpB,UAAU,SACZa,EACAE,EACAE,EACAE,GAWUE,EANb,yBAAKrB,UAAU,iBACb,4BArCc,0BAsCboB,GC7CCE,G,MACJ,0BAAMtB,UAAU,eACd,yBAAKuB,aAAW,wBACd,2BACEC,KAAK,OACLC,KAAK,YACLF,aAAW,aACXG,YAAY,eAEd,2BACEF,KAAK,OACLC,KAAK,WACLF,aAAW,YACXG,YAAY,cAEd,2BAAOF,KAAK,OAAOC,KAAK,QAAQF,aAAW,QAAQG,YAAY,WAEjE,4BAAQC,GAAG,YAAYH,KAAK,UAA5B,eAMEI,EACJ,yBAAK5B,UAAU,kBACb,yCACA,2FACCsB,GAMUO,EAFG,yBAAK7B,UAAU,kBAAkB4B,GC/B7CE,G,MAAY,WAGhB,IAFA,IAAMC,EAAM,mBACRC,EAAQ,GACHC,EAAE,EAAGA,EAAE,EAAGA,IAAK,CAEtBD,GAASD,EADGG,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,SAG7C,MAAO,IAAML,IAwBAM,EArBM,WAEnB,IADA,IAAMC,EAAM,GACHN,EAAE,EAAGA,EAAE,EAAGA,IACjBM,EAAIC,KAAKV,KAGX,OACE,yBAAK9B,UAAU,mBACZuC,EAAIlC,KAAI,SAACC,EAAMmC,GAAP,OACP,yBACEzC,UAAU,YACVO,IAAKkC,EAAMnC,EAAKE,WAChBkC,MAAO,CAACC,gBAAiBrC,IAExBA,QCRIsC,MAXf,WACE,OACE,yBAAK5C,UAAU,OACZqB,EACD,kBAAC,EAAD,MACCQ,EACD,kBAAC,EAAD,QCFcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c8f6ce5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCheckCircle,\r\n  faClock\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Profile.css\";\r\nimport { faReact } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst skillsTitle = \"Skills\";\r\nconst authorName = \"Piouson\";\r\nconst authorRole = \"Developer\";\r\nconst authorLocation = \"Manchester UK\";\r\nconst authorDateJoined = \"03 Oct 2020\";\r\nconst authorSkills = [\r\n  \"HTML\",\r\n  \"CSS\",\r\n  \"Sass\",\r\n  \"Bootstrap\",\r\n  \"JavaScript\",\r\n  \"jQuery\",\r\n  \"TypeScript\",\r\n  \"React\",\r\n  \"Redux\",\r\n  \"Material-UI\",\r\n  \"Node\",\r\n  \"Express\",\r\n  \"MongoDB\",\r\n  \"PostgreSQL\",\r\n  \"Jest\",\r\n  \"Mocha\",\r\n  \"Cypress\",\r\n  \"Docker\",\r\n  \"Git\",\r\n];\r\n\r\nconst profile = (\r\n  <div className=\"profile\">\r\n    <FontAwesomeIcon icon={faReact} />\r\n    <h2>\r\n      {authorName} <FontAwesomeIcon icon={faCheckCircle} />\r\n    </h2>\r\n    <p>\r\n      {authorRole}, {authorLocation}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst skillsItems = authorSkills.map((item) => (\r\n  <span className=\"skill-item\" key={item.toString()}>\r\n    {item}\r\n  </span>\r\n));\r\n\r\nconst skills = (\r\n  <div className=\"skills\">\r\n    <h2>{skillsTitle}</h2>\r\n    <p>{skillsItems}</p>\r\n    <p>\r\n      <FontAwesomeIcon icon={faClock} /> Joined on {authorDateJoined}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst profileCard = (\r\n  <div className=\"profile-card\">\r\n    {profile}\r\n    {skills}\r\n  </div>\r\n);\r\n\r\nfunction ProfileBox() {\r\n  return (\r\n    <div className=\"box profile-box\">{profileCard}</div>\r\n  );\r\n}\r\n\r\nexport default ProfileBox;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faHtml5,\r\n  faCss3Alt,\r\n  faJs,\r\n  faReact\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport \"./Icons.css\";\r\n\r\nconst techTitle = \"Front End Technologies\";\r\n\r\nconst htmlDiv = (\r\n  <div>\r\n    <FontAwesomeIcon icon={faHtml5} />\r\n  </div>\r\n);\r\n\r\nconst cssDiv = (\r\n  <div>\r\n    <FontAwesomeIcon icon={faCss3Alt} />\r\n  </div>\r\n);\r\n\r\nconst jsDiv = (\r\n  <div>\r\n    <FontAwesomeIcon icon={faJs} />\r\n  </div>\r\n);\r\n\r\nconst reactDiv = (\r\n  <div>\r\n    <FontAwesomeIcon icon={faReact} />\r\n  </div>\r\n);\r\n\r\nconst icons = (\r\n  <div className=\"icons\">\r\n    {htmlDiv}\r\n    {cssDiv}\r\n    {jsDiv}\r\n    {reactDiv}\r\n  </div>\r\n);\r\n\r\nconst iconsBox = (\r\n  <div className=\"box icons-box\">\r\n    <h1>{techTitle}</h1>\r\n    {icons}\r\n  </div>\r\n);\r\n\r\nexport default iconsBox;\r\n","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst signupForm = (\r\n  <form className=\"signup-form\">\r\n    <div aria-label=\"Subscription Details\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"firstname\"\r\n        aria-label=\"First Name\"\r\n        placeholder=\"First name\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"lastname\"\r\n        aria-label=\"Last Name\"\r\n        placeholder=\"Last name\"\r\n      />\r\n      <input type=\"text\" name=\"email\" aria-label=\"Email\" placeholder=\"Email\" />\r\n    </div>\r\n    <button id=\"subscribe\" type=\"submit\">\r\n      Subscribe\r\n    </button>\r\n  </form>\r\n);\r\n\r\nconst signupContent = (\r\n  <div className=\"signup-content\">\r\n    <h2>Subscribe</h2>\r\n    <p>Sign up with your email address to receive news and updates.</p>\r\n    {signupForm}\r\n  </div>\r\n);\r\n\r\nconst signupBox = <div className=\"box signup-box\">{signupContent}</div>;\r\n\r\nexport default signupBox;\r\n","import React from \"react\";\r\nimport \"./HexaColorBox.css\";\r\n\r\nconst hexaColor = () => {\r\n  const str = \"0123456789abcdef\";\r\n  let color = \"\";\r\n  for (let i=0; i<6; i++) {\r\n    let index = Math.floor(Math.random() * str.length);\r\n    color += str[index];\r\n  }\r\n  return \"#\" + color;\r\n};\r\n\r\nconst HexaColorBox = () => {\r\n  const arr = [];\r\n  for (let i=0; i<5; i++) {\r\n    arr.push(hexaColor());\r\n  }\r\n\r\n  return (\r\n    <div className=\"box color-boxes\">\r\n      {arr.map((item, index) => (\r\n        <div\r\n          className=\"color-box\"\r\n          key={index+item.toString()}\r\n          style={{backgroundColor: item}}\r\n        >\r\n          {item}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HexaColorBox;\r\n","import React from 'react';\nimport './App.css';\nimport './day-03/Profile.css';\nimport ProfileBox from './day-03/Profile';\nimport iconsBox from './day-03/Icons';\nimport signupBox from './day-03/Form';\nimport HexaColorBox from './day-04/HexaColorBox';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {iconsBox}\n      <ProfileBox />\n      {signupBox}\n      <HexaColorBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}